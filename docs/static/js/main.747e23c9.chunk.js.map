{"version":3,"sources":["cards.js","components/Card.js","Sets.js","pages/Combinations/combinations.js","pages/CardList/cardList.js","App.js","serviceWorker.js","index.js"],"names":["bright","animal","ribbon","junk","types","cardsByMonth","month","plant","allCards","pipe","map","addIndex","type","index","flatten","monthIndex","findIndex","c","typeIndex","t","byType","filter","cardsByType","specialCards","rainMan","find","geese","cuckoo","nightingale","poetryRibbons","includes","purpleRibbons","dryRibbons","sake","lightning","paulownia","Card","styled","div","p","size","card","cardKey","combinations","name","points","base","count","pool","requires","excludes","additionalAfter","min","sets","notes","ComboPage","ComboControls","ComboLink","a","Combination","CardList","CombinationCards","cards","key","CardInstructions","ComboTitle","ComboPoints","Combinations","href","combination","_pool","x","uniq","when","length","set","xs","cb","Controls","CardPage","CardGroup","CardLabel","filters","setFilters","organize","setOrganize","cardMatchesFilters","sort","cardComparator","groupBy","toLowerCase","mapObjIndexed","group","Object","values","FilterLabel","label","ControlGroup","Filters","isAll","change","e","target","checked","f","FilterInput","prop","children","onChange","Organize","b","diff","GroupLabel","AppContainer","Links","Header","App","useState","to","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.747e23c9.chunk.js","sourcesContent":["import { filter, findIndex, addIndex, pipe, map, flatten } from 'ramda';\n\nexport const bright = \"Bright\";\nexport const animal = \"Animal\";\nexport const ribbon = \"Ribbon\";\nexport const junk = \"Junk\";\n\nexport const types = [bright, animal, ribbon, junk];\n\nexport const cardsByMonth = [\n  { month: \"January\", plant: \"Pine\", types: [bright, ribbon, junk, junk] },\n  { month: \"February\", plant: \"Plum\", types: [animal, ribbon, junk, junk] },\n  { month: \"March\", plant: \"Cherry\", types: [bright, ribbon, junk, junk] },\n\n  { month: \"April\", plant: \"Wisteria\", types: [animal, ribbon, junk, junk] },\n  { month: \"May\", plant: \"Iris\", types: [animal, ribbon, junk, junk] },\n  { month: \"June\", plant: \"Peony\", types: [animal, ribbon, junk, junk] },\n\n  { month: \"July\", plant: \"Blush Clover\", types: [animal, ribbon, junk, junk] },\n  { month: \"August\", plant: \"Pampas Grass\", types: [bright, animal, junk, junk] },\n  { month: \"September\", plant: \"Chrysanthemum\", types: [animal, ribbon, junk, junk] },\n\n  { month: \"October\", plant: \"Maple\", types: [animal, ribbon, junk, junk] },\n  { month: \"November\", plant: \"Paulownia\", types: [bright, junk, junk, junk] },\n  { month: \"December\", plant: \"Willow\", types: [bright, animal, ribbon, junk] }\n];\n\nexport const allCards = pipe(\n  map(({ month, plant, types }) =>\n    addIndex(map) ((type, index) => ({ month, plant, type, index })) (types)\n  ),\n  flatten,\n) (cardsByMonth);\n\nexport const monthIndex = ({ month }) => findIndex(c => c.month === month) (cardsByMonth);\nexport const typeIndex = ({ type }) => findIndex(t => t === type) (types);\n\nconst byType = type => filter(c => c.type === type);\n\nexport const cardsByType = {\n  bright: byType (bright) (allCards),\n  animal: byType (animal) (allCards),\n  ribbon: byType (ribbon) (allCards),\n  junk: byType (junk) (allCards),\n}\n\nexport const specialCards = {\n  rainMan: allCards.find(c => c.month === \"December\" && c.index === 0),\n  geese: allCards.find(c => c.month === \"August\" && c.type === animal),\n  cuckoo: allCards.find(c => c.month === \"April\" && c.type === animal),\n  nightingale: allCards.find(c => c.month === \"February\" && c.type === animal),\n  poetryRibbons: allCards.filter(c => c.type === ribbon && [\"January\", \"February\", \"March\"].includes(c.month)),\n  purpleRibbons: allCards.filter(c => c.type === ribbon && [\"June\", \"September\", \"October\"].includes(c.month)),\n  dryRibbons: allCards.filter(c => c.type === ribbon && [\"April\", \"May\", \"July\"].includes(c.month)),\n\n  sake: allCards.find(c => c.month === \"September\" && c.index === 1),\n  lightning: allCards.find(c => c.month === \"December\" && c.index === 3),\n  paulownia: allCards.find(c => c.month === \"November\" && c.index === 1)\n};\n\n","// import React from 'react';\nimport styled from 'styled-components';\n\nimport { monthIndex, } from '../cards';\n\nexport const Card = styled.div`\n  display: inline-block;\n  margin: 2px;\n\n  background-repeat: no-repeat;\n  background-position: center;\n  background-size: cover;\n  border-radius: 3px;\n\n  width: ${p => p.size || 100}px;\n  height: ${p => p.size ? 1.64 * p.size : 164}px;\n\n  background-image: url(\"./cards/${p => monthIndex(p.card)}/${p => p.card.index}.png\"); \n`;\n\nexport const cardKey = card => `${card.month} ${card.type} ${card.index}`;\n","import { any, none, all } from 'ramda';\n\nimport {\n  specialCards,\n  cardsByType\n} from './cards';\n\nexport const matchesCombination = combination => cards => {\n  const {\n    name,\n    count = null,\n    min = null,\n    pool = [],\n    requires = [],\n    excludes = [],\n    sets = null\n  } = combination;\n\n  const cardSet = new Set(cards);\n  const poolSet = new Set(pool);\n\n  if (count !== null && cardSet.size !== count)\n    return false;\n  else if (min !== null && cardSet.size < min)\n    return false;\n  else if (count === null && min === null && sets === null)\n    throw new Error(`sets, count, or min must be defined for ${name}`);\n\n  if (sets !== null) {\n    return any(s => {\n      if (s.length !== cards.length)\n        return false;\n      const set = new Set(s);\n      return all(c => set.has(c)) (cards);\n    }) (sets);\n  } else\n    return all(x => poolSet.has(x)) (cards)\n      && all(x => cardSet.has(x)) (requires)\n      && none(x => cardSet.has(x)) (excludes);\n\n};\n\n// from http://www.sloperama.com/gostop/scoring.html\nexport const combinations = [\n  // Brights\n  {\n    name: \"5 Brights\",\n    points: { base: 15 },\n    count: 5,\n    pool: cardsByType.bright,\n  }, {\n    name: \"Wet 4 Brights\",\n    points: { base: 4 },\n    count: 4,\n    pool: cardsByType.bright,\n    requires: [specialCards.rainMan]\n  }, {\n    name: \"Dry 4 Brights\",\n    points: { base: 5 },\n    count: 4,\n    pool: cardsByType.bright,\n    excludes: [specialCards.rainMan]\n  }, {\n    name: \"Wet 3 Brights\",\n    points: { base: 2 },\n    count: 3,\n    pool: cardsByType.bright,\n    requires: [specialCards.rainMan]\n  }, {\n    name: \"Dry 3 Brights\",\n    points: { base: 3 },\n    count: 3,\n    pool: cardsByType.bright,\n    excludes: [specialCards.rainMan]\n  },\n\n  // Animals\n  {\n    name: \"5 Animals\",\n    points: { base: 1, additionalAfter: 5 },\n    min: 5,\n    pool: cardsByType.animal\n  }, {\n    name: \"Godori\",\n    points: { base: 3 },\n    sets: [[specialCards.geese, specialCards.cuckoo, specialCards.nightingale]]\n  },\n\n  // Ribbons\n  {\n    name: \"5 Ribbons\",\n    points: { base: 1, additionalAfter: 5 },\n    count: 5,\n    pool: cardsByType.ribbon\n  }, {\n    name: \"3 Matching Ribbons\",\n    points: { base: 3 },\n    notes:\n`This doesn't include the \"rain ribbon\" in December.\nAlso note -- \"Freedom of choice\" principle: 2 ribbon triplets can count as 3 matching ribbons twice, plus 5 ribbons + 1, for 8 points.`,\n    sets: [specialCards.poetryRibbons, specialCards.purpleRibbons, specialCards.dryRibbons]\n  },\n\n  // Junk\n  {\n    name: \"Ten Pi\",\n    notes: \"Pi is Korean for Junk\",\n    points: { base: 1, additionalAfter: 10 },\n    min: 10,\n    pool: cardsByType.junk,\n  }, {\n    name: \"Special Junk\",\n    notes: \"These cards count as 2 junks. The Sake card may be one Animal card XOR 2 junk cards. sang-pi in Korean.\",\n    points: { base: 2 },\n    sets: [[specialCards.sake], [specialCards.lightning], [specialCards.paulownia]]\n  }\n];\n","import React from 'react';\nimport { uniq, map, filter, pipe } from 'ramda';\nimport styled from 'styled-components';\n\nimport { Card, cardKey } from '../../components/Card';\n\nimport { combinations } from '../../Sets';\n\nconst ComboPage = styled.div`\n  grid-area: page;\n`;\n\nconst ComboControls = styled.div`\n  grid-area: controls;\n  margin: 1rem;\n  margin-top: 0;\n`;\n\nconst ComboLink = styled.a`\n  display: block;\n`;\n\nconst Combination = styled.div`\n  padding-bottom: 1rem;\n`;\n\nconst CardList = styled.div`\n  display: inline-block;\n  padding-right: 1rem;\n`;\n\nconst CombinationCards = ({ cards }) => (\n  cards.map(card =>\n    <Card card={card} key={cardKey(card)} />\n  )\n);\n\nconst CardInstructions = styled.div`\n  display: block;\n`;\n\nconst ComboTitle = styled.div`\n  text-align: center;\n  font-weight: bold;\n`;\n\nconst ComboPoints = styled(ComboTitle)`\n  text-align: center;\n  color: deeppink;\n`;\n\nexport function Combinations () {\n  return (\n    <>\n      <ComboControls>\n        {combinations.map(({ name }) => (\n          <ComboLink href={`#${name}`}>{name}</ComboLink>\n        ))}\n      </ComboControls>\n\n      <ComboPage>\n        {combinations.map(combination => {\n          const {\n            name,\n            pool: _pool = [],\n            count,\n            min,\n            requires = [],\n            excludes = [],\n            sets = [],\n            notes,\n            points\n          } = combination;\n\n          const pool = pipe(\n            filter(x => !requires.includes(x)),\n            filter(x => !excludes.includes(x)),\n            uniq\n          ) (_pool);\n\n          return (\n            <Combination>\n              <ComboTitle>\n                <a name={name}>{name}</a>\n              </ComboTitle>\n              <ComboPoints>\n                {points.base} {points.base === 1 ? 'point' : 'points'} \n                {!points.additionalAfter\n                    ? ''\n                    : (\n                      ` after ${points.additionalAfter} cards, and an additional point per card after`\n                    )\n                }.\n              </ComboPoints>\n              {notes &&\n                <div>\n                  Note: {notes}\n                </div>\n              }\n              {when(requires, () => (\n                <CardList>\n                  <CardInstructions>\n                    {requires.length === 1 ? \"this card\" : \"the following cards\"}\n                  </CardInstructions>\n                  <CombinationCards cards={requires} />\n                </CardList>\n              ))}\n              {when(pool, () => (\n                <CardList>\n                  <CardInstructions>\n                    {when(requires, () => \"and \")}\n                    {!min && !!pool.length && count && (count < pool.length + requires.length\n                      ? `any ${count - requires.length} of the following cards`\n                      : \"all of the following cards\")}\n                    {pool && min && `at least ${min} of the following cards`}\n                  </CardInstructions>\n                  <CombinationCards cards={pool.filter(c => !excludes.includes(c))} />\n                </CardList>\n              ))}\n              {when(excludes, () => (\n                <CardList>\n                  <CardInstructions>\n                    not\n                  </CardInstructions>\n                  <CombinationCards cards={excludes} />\n                </CardList>\n              ))}\n              {when(sets, () => (\n                <CardList>\n                  <CardInstructions>\n                    {sets.length === 1 && \"All cards in this set\"}\n                    {sets.length > 1 && \"Any one of these sets\"}\n                  </CardInstructions>\n                  {map(set => (\n                    <div>\n                      <CombinationCards cards={set} />\n                    </div>\n                  )) (sets)}\n                </CardList>\n              ))}\n            </Combination>\n          );\n        })}\n      </ComboPage>\n    </>\n  );\n}\n\nfunction when (xs, cb) {\n  if (xs.length)\n    return cb();\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { mapObjIndexed, pipe, map, sort, filter, groupBy } from 'ramda';\nimport { bright, animal, ribbon, junk, types, allCards, cardsByMonth, monthIndex, typeIndex } from '../../cards';\n\nimport { Card, cardKey } from '../../components/Card';\n\nconst Controls = styled.div`\n  grid-area: controls;\n\n  margin: 1rem;\n  margin-top: 0;\n`;\n\nconst CardPage = styled.div`\n  grid-area: page;\n  text-align: center;\n`;\n\nconst CardGroup = styled.div`\n  display: inline-block;\n  margin-right: 1em;\n`;\n\nconst CardLabel = styled.div`\n  display: block;\n  text-align: left;\n`;\n\n\nexport function CardList ({ filters, setFilters, organize, setOrganize }) {\n  return (\n    <>\n      <Controls>\n        <Filters filters={filters} setFilters={setFilters} />\n        <Organize organize={organize} setOrganize={setOrganize} />\n      </Controls>\n\n      <CardPage>\n        {pipe(\n          filter(cardMatchesFilters(filters)),\n          sort(cardComparator(organize)),\n          groupBy(card => card[organize.toLowerCase()]),\n\n          map(map(card => (\n            <Card card={card} key={cardKey(card)} />\n          ))),\n\n          mapObjIndexed((cards, group) => (\n            <CardGroup key={group}>\n              <GroupLabel type={organize} group={group} count={cards.length} />\n              <div>{cards}</div>\n            </CardGroup>\n          )),\n\n          Object.values\n        ) (allCards)}\n      </CardPage>\n    </>\n  );\n}\n\nconst FilterLabel = styled.label`\n  display: block;\n`;\n\nconst ControlGroup = styled.div`\n  margin-bottom: 1rem;\n`;\n\nconst Filters = ({ filters, setFilters }) => {\n  const isAll = filters.length === types.length;\n  const isChecked = name => isAll || filters.includes(name);\n  const change = name => e => {\n    if (e.target.checked)\n      setFilters([name, ...filters]);\n    else {\n      setFilters(filters.filter(f => f !== name));\n    }\n  };\n\n  const FilterInput = ({ prop, children }) => (\n    <FilterLabel>\n      <input type=\"checkbox\" checked={isChecked(prop)} onChange={change(prop)} />\n      {children}\n    </FilterLabel>\n  );\n\n  return (\n    <ControlGroup>\n      Filter card types:\n      <FilterLabel>\n        <input type=\"checkbox\" checked={isAll} onChange={e => e.target.checked ? setFilters(types) : setFilters([bright])} />\n        All\n      </FilterLabel>\n      <FilterInput prop={bright}>Bright</FilterInput>\n      <FilterInput prop={animal}>Animal</FilterInput>\n      <FilterInput prop={ribbon}>Ribbon</FilterInput>\n      <FilterInput prop={junk}>Junk</FilterInput>\n    </ControlGroup>\n  );\n};\n\n\nconst Organize = ({ organize, setOrganize }) => {\n  return (\n    <ControlGroup>\n      Group by:\n      <FilterLabel>\n        <input type=\"radio\" name=\"organize\" checked={organize === \"Month\"} onChange={e => setOrganize(\"Month\")} />\n        Month\n      </FilterLabel>\n      <FilterLabel>\n        <input type=\"radio\" name=\"organize\" checked={organize === \"Type\"} onChange={e => setOrganize(\"Type\")} />\n        Type\n      </FilterLabel>\n    </ControlGroup>\n  );\n};\n\n\n\nconst cardMatchesFilters = filters => card => {\n  if (filters.length === 0)\n    return true;\n\n  if (card.type === junk)\n    return filters.includes(junk);\n  else\n    return filters.includes(card.type);\n};\n\nconst cardComparator = organize => (a, b) => {\n  let diff;\n\n  if (organize === \"Month\")\n    diff = monthIndex(a) - monthIndex(b);\n  else if (organize === \"Type\")\n    diff = typeIndex(a) - typeIndex(b);\n\n  return diff !== 0\n    ? diff\n    : a.index - b.index;\n};\n\nconst GroupLabel = ({ type,  group, count }) => {\n  const Contents = () => {\n    if (type === \"Month\") {\n      const month = cardsByMonth.find(c => c.month === group);\n      return <> {month.month}: <i>{month.plant}</i></>;\n    } else if (type === \"Type\") {\n      return <> {group} </>;\n    }\n  };\n\n  return (\n    <CardLabel>\n      <Contents /> ({count})\n    </CardLabel>\n  );\n}\n\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nimport { Combinations } from './pages/Combinations/combinations';\nimport { CardList } from './pages/CardList/cardList';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nconst AppContainer = styled.div`\n  display: grid;\n  grid-template:\n    [row1-start] \".        header header\" 2rem [row1-end]\n    [row2-start] \"nav      page   page\"   auto [row2-end]\n    [row3-start] \"controls page   page\"   1fr  [row3-end]\n    [row4-start] \"footer   footer footer\" 2em  [row4-end]\n    / 15rem auto;\n`;\n\nconst Links = styled.div`\n  grid-area: nav;\n  margin: 1rem;\n  margin-top: 0;\n`;\n\nconst Header = styled.div`\n  grid-area: header;\n  justify-self: center;\n  align-self: center;\n`;\n\nfunction App() {\n  const [filters, setFilters] = useState([]);\n  const [organize, setOrganize] = useState(\"Month\");\n\n  return (\n    <Router>\n      <AppContainer>\n        <Header>\n          Go Stop\n        </Header>\n\n        <Links>\n          <Link to=\"/\">Cards</Link><br />\n          <Link to=\"/combinations\">Combinations</Link>\n        </Links>\n\n        <Switch>\n          <Route path=\"/combinations\">\n            <Combinations />\n          </Route>\n          <Route path=\"/\">\n            <CardList {...{ filters, setFilters, organize, setOrganize }} />\n          </Route>\n        </Switch>\n      </AppContainer>\n    </Router>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}